name: build
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
env:
  GODOT_BASE_BRANCH: 3.2
  SCONS_CACHE_MSVC_CONFIG: true
  SCONS_CACHE_LIMIT: 4096

jobs:
  build-linux-editor:
    runs-on: "ubuntu-20.04"
    steps:
      - name: Checkout Godot Engine 3.2
        uses: actions/checkout@v2
        with:
          repository: 'godotengine/godot'
          ref: '3.2.3-stable'
      - name: Checkout Flash Module
        uses: actions/checkout@v2
        with:
          path: 'modules/flash'
    
      # Azure repositories are not reliable, we need to prevent azure giving us packages.
      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update

      # Install all packages (except scons)
      - name: Configure dependencies
        run: |
          sudo apt-get install build-essential pkg-config libx11-dev libxcursor-dev \
            libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev libxi-dev libxrandr-dev yasm

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: linux-editor-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}
          
      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 verbose=yes warnings=all werror=yes platform=x11 tools=yes target=release_debug
      - name: List output
        run: find bin
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: editor.linux
          path: bin/*

  build-osx-editor:
    runs-on: "macos-latest"
    steps:
      - name: Checkout Godot Engine 3.2
        uses: actions/checkout@v2
        with:
          repository: 'godotengine/godot'
          ref: '3.2.3-stable'
      - name: Checkout Flash Module
        uses: actions/checkout@v2
        with:
          path: 'modules/flash'

      # Upload cache on completion and check it out now
      - name: Load .scons_cache directory
        id: macos-editor-cache
        uses: actions/cache@v2
        with:
          path: ${{github.workspace}}/.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: ${{github.workspace}}/.scons_cache/
        run: |
          scons -j2 verbose=yes warnings=all werror=yes platform=osx tools=yes target=release_debug
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: editor.osx
          path: bin/*

  build-windows-editor:
    # Windows 10 with latest image
    runs-on: "windows-latest"
    steps:
      - name: Checkout Godot Engine 3.2
        uses: actions/checkout@v2
        with:
          repository: 'godotengine/godot'
          ref: '3.2.3-stable'
      - name: Checkout Flash Module
        uses: actions/checkout@v2
        with:
          path: 'modules/flash'

      # Upload cache on completion and check it out now
      # Editing this is pretty dangerous for Windows since it can break and needs to be properly tested with a fresh cache.
      - name: Load .scons_cache directory
        id: windows-editor-cache
        uses: RevoluPowered/cache@v2.1
        with:
          path: /.scons_cache/
          key: ${{github.job}}-${{env.GODOT_BASE_BRANCH}}

      # Use python 3.x release (works cross platform; best to keep self contained in it's own step)
      - name: Set up Python 3.x
        uses: actions/setup-python@v2
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.x'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'

      # Setup scons, print python version and scons version info, so if anything is broken it won't run the build.
      - name: Configuring Python packages
        run: |
          python -c "import sys; print(sys.version)"
          python -m pip install scons pywin32
          python --version
          scons --version

      # We should always be explicit with our flags usage here since it's gonna be sure to always set those flags
      - name: Compilation
        env:
          SCONS_CACHE: /.scons_cache/
        run: |
          scons -j2 verbose=yes warnings=all werror=yes platform=windows tools=yes target=release_debug

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: editor.windows
          path: bin/*

  archive:
    runs-on: ubuntu-latest
    needs: [build-linux-editor, build-osx-editor, build-windows-editor]
    steps:
      - run: mkdir -p release
      - name: Download Linux editor
        uses: actions/download-artifact@v2
        with:
          name: editor.linux
          path: release
      - name: Download OSX Editor
        uses: actions/download-artifact@v2
        with:
          name: editor.osx
          path: release
      - name: Download Windows Editor
        uses: actions/download-artifact@v2
        with:
          name: editor.windows
          path: release
      - name: Show contents
        run: find release
      - name: Prepare assets
        run: |
          mv release/godot.windows.opt.tools.64.exe release/godot-flash.exe
          zip -r release/godot-flash.windows.zip release/godot-flash.exe
          mv release/godot.x11.opt.tools.64 release/godot-flash
          zip -r release/godot-flash.linux.zip release/godot-flash
          mv release/godot.osx.opt.tools.64 release/godot-flash
          zip -r release/godot-flash.osx.zip release/godot-flash
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Windows Editor
        id: upload-windows-release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./release/godot-flash.windows.zip
          asset_name: godot-flash.windows.zip
          asset_content_type: application/zip
      - name: Upload OSX Editor
        id: upload-osx-release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./release/godot-flash.osx.zip
          asset_name: godot-flash.osx.zip
          asset_content_type: application/zip
      - name: Upload Linux Editor
        id: upload-linux-release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./release/godot-flash.linux.zip
          asset_name: godot-flash.linux.zip
          asset_content_type: application/zip
      


  # build-toolkit-win:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Install mingw
  #       run: sudo apt-get install gcc-mingw-w64
  #     - uses: actions/checkout@v2
  #     - uses: actions/cache@v2
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           toolkit/target
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         target: x86_64-pc-windows-gnu
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         use-cross: true
  #         command: build
  #         args: --release --target x86_64-pc-windows-gnu --manifest-path=toolkit/Cargo.toml
  #     - name: Show content
  #       run: find .
  #     - name: Upload library
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: toolkit.win
  #         path: toolkit/target/x86_64-pc-windows-gnu/release/toolkit.exe
  
  # build-toolkit-osx:
  #   runs-on: macos-10.15
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/cache@v2
  #       with:
  #         path: |
  #           ~/.cargo/registry
  #           ~/.cargo/git
  #           toolkit/target
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
  #     - uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #     - uses: actions-rs/cargo@v1
  #       with:
  #         command: build
  #         args: --release --manifest-path=toolkit/Cargo.toml
  #     - name: Upload library
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: toolkit.osx
  #         path: toolkit/target/release/toolkit
  # archive:
  #   runs-on: ubuntu-latest
  #   needs: [build-node, build-toolkit-win, build-toolkit-osx]
  #   steps:
  #     - run: mkdir -p "funexpected-tools/Funexpected Tools"
  #     - uses: actions/checkout@v2
  #     - name: Download compiled js
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: tools
  #         path: funexpected-tools/Funexpected Tools
  #     - name: Download toolkit.win
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: toolkit.win
  #         path: funexpected-tools/Funexpected Tools
  #     - name: Download toolkit.osx
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: toolkit.osx
  #         path: funexpected-tools/Funexpected Tools
      
  #     - name: Compress release
  #       run: zip -r funexpected-tools funexpected-tools
      
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         draft: false
  #         prerelease: false
      
  #     - name: Upload Release Asset
  #       id: upload-release-asset 
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
  #         asset_path: ./funexpected-tools.zip
  #         asset_name: funexpected-tools.zip
  #         asset_content_type: application/zip
      
